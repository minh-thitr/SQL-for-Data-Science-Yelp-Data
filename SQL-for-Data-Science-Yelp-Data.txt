Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 records
ii. Business table = 10000 records
iii. Category table = 10000 records
iv. Checkin table = 10000 records
v. elite_years table = 10000 records
vi. friend table = 10000 records
vii. hours table = 10000 records
viii. photo table = 10000 records
ix. review table = 10000 records
x. tip table = 10000 records
xi. user table = 10000 records
	
- SQL Code: SELECT COUNT(*) FROM table_name

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 distinct records for primary key 'id'
ii. Hours = 1562 distinct records for foreign key 'business_id'
iii. Category = 2643 distinct records for foreign key 'business_id'
iv. Attribute = 1115 distinct records for foreign key 'business_id'
v. Review = 10000 distinct records for primary key 'id', 8090 distinct records for foreign key 'business_id', 9581 distinct records for foreign key 'user_id'
vi. Checkin = 493 distinct records for foreign key 'business_id'
vii. Photo = 10000 distinct records for primary key 'id', 6493 distinct records for foreign key 'business_id'
viii. Tip = 3979 distinct records for foreign key 'business_id', 537 distinct records for foreign key 'user_id'
ix. User = 10000 distinct records for primary key 'id'
x. Friend = 11 distinct records for foreign key 'user_id'
xi. Elite_years = 2780 distinct records for foreign key 'user_id'

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

- SQL Code: SELECT COUNT (DISTINCT(key_name)) FROM table_name

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

SELECT * FROM user
WHERE id IS NULL OR 
    name IS NULL OR 
    review_count IS NULL OR 
    yelping_since IS NULL OR 
    useful IS NULL OR 
    funny IS NULL OR 
    cool IS NULL OR 
    fans IS NULL OR 
    average_stars IS NULL OR 
    compliment_hot IS NULL OR 
    compliment_more IS NULL OR 
    compliment_profile IS NULL OR 
    compliment_cute IS NULL OR 
    compliment_list IS NULL OR 
    compliment_note IS NULL OR 
    compliment_plain IS NULL OR 
    compliment_cool IS NULL OR 
    compliment_funny IS NULL OR 
    compliment_writer IS NULL OR 
    compliment_photos IS NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1.0		max:5.0		avg:3.7082
		- SQL Code: SELECT MIN(stars), MAX(stars), AVG(stars) FROM review
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		- SQL Code: SELECT MIN(stars), MAX(stars), AVG(stars) FROM review
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		- SQL code: SELECT MIN(likes), MAX(likes), AVG(likes) FROM tip
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		- SQL code: SELECT MIN(count), MAX(count), AVG(count) FROM checkin
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		- SQL code: SELECT MIN(review_count), MAX(review_count), AVG(review_count) FROM user


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT city, SUM (review_count) AS reviews
FROM business
GROUP BY city
ORDER BY reviews DESC
	
	
	Copy and Paste the Result Below:
+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, SUM (review_count) AS stars_count
FROM business
WHERE city LIKE 'Avon'
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------------+
| stars | stars_count |
+-------+-------------+
|   1.5 |          10 |
|   2.5 |           6 |
|   3.5 |          88 |
|   4.0 |          21 |
|   4.5 |          31 |
|   5.0 |           3 |
+-------+-------------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, SUM (review_count) AS stars_count
FROM business
WHERE city LIKE 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------------+
| stars | stars_count |
+-------+-------------+
|   2.0 |           8 |
|   2.5 |           3 |
|   3.0 |          11 |
|   3.5 |           6 |
|   4.0 |          69 |
|   4.5 |          17 |
|   5.0 |          23 |
+-------+-------------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT name, review_count
FROM user
ORDER BY review_count DESC
limit 3;
		
	Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
- Answer: 
	No, posing more reviews does not correlate with more fans. One way we can notice that since 'review_count' in descending order, if they're correlate, 'fans' should be in descending order as well; however 'fans' column is not in any order. Another way, for example, Gerald has posed the most reviews, but Gerald has less fans than Harald or Mimi. Therefore, there is no correlation between posing reviews and fans. 
	
- SQL codes: 
SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC;

- Results:
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: reviews with word 'love' = 1780; reviews with word 'hate' = 232. So, there are more reviews with word 'love' than with the word 'hate'.


	
	SQL code used to arrive at answer:

SELECT COUNT (id)
FROM review
WHERE text LIKE '%love%'

SELECT COUNT (id)
FROM review
WHERE text LIKE '%hate%'



	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT id, name, fans
FROM user
ORDER BY fans DESC
limit 10
	
	
	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+



	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

City: Phoenix 	& 	Category: Food

- SQL code for group the business in the city:
SELECT b.city, c.category
FROM business b INNER JOIN category c ON b.id = c.business_id
WHERE city LIKE 'Phoenix'


i. Do the two groups you chose to analyze have a different distribution of hours?

Yes. There are 2 businesses of the two groups I chose - Starbucks and Bootleggers Modern American Smokehouse. Starbucks opens everyday from 5:00-20:00 with 2-3 stars, Bootleggers Modern American Smokehouse also opens every day from 11:00-22:00 with 4-5 stars. So, they have a different time distribution of hours.

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes. They are have a different number of reviews. For example, Starbucks with 2-3 stars has 52 reviews, on the other hand, Bootleggers Modern American Smokehouse with 4-5 stars has 431 reviews. 
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Yes, we can use address and postal code from business data to infer their location. Based on postal code, we somehow can know information on the demographic of the people of that region. For example, postal code of Starbucks is 85048, which is located in Southside of Phoenix, and postal code of Bootleggers Modern American Smokehouse is located near Northside of Phoenix.

SQL code used for analysis:

SELECT b.city, c.category, h.hours, b.stars, b.name, b.review_count, b.address, b.postal_code,
CASE
    WHEN hours LIKE "%Sunday%" THEN 1
    WHEN hours LIKE "%Monday%" THEN 2
    WHEN hours LIKE "%Tuesday%" THEN 3
    WHEN hours LIKE "%Wednesday%" THEN 4
    WHEN hours LIKE "%Thursday%" THEN 5
    WHEN hours LIKE "%Friday%" THEN 6
    WHEN hours LIKE "%Saturday%" THEN 7
    END AS days,
CASE
    WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 stars'
    WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 stars'
    END AS stars_rating
FROM business b INNER JOIN category c ON b.id = c.business_id 
INNER JOIN hours h ON b.id = h.business_id
WHERE city LIKE 'Phoenix' AND category LIKE 'Food'
GROUP BY stars, days


	
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: 
Thea average star of the ones that are still open is just likely higher than the ones are closed.
 
         
         
ii. Difference 2:
The ones that are still open have much more number of review (about 225,000 reviews) than the ones are closed.
         
         
         
SQL code used for analysis:

SELECT COUNT (DISTINCT (id)) AS number_of_business, is_open, AVG (stars), AVG (review_count), SUM (review_count)
FROM business
GROUP BY is_open

Result:
+--------------------+---------+---------------+--------------------+--------------------+
| number_of_business | is_open |   AVG (stars) | AVG (review_count) | SUM (review_count) |
+--------------------+---------+---------------+--------------------+--------------------+
|               1520 |       0 | 3.52039473684 |      23.1980263158 |              35261 |
|               8480 |       1 | 3.67900943396 |      31.7570754717 |             269300 |
+--------------------+---------+---------------+--------------------+--------------------+

	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

Predicting the overall star rating for a business based on review and user characteristics


ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

First of all, I choose business and user data for my analysis. Star rating for a business mostly based on star ratings and positive reviews about their experiences, so user's experience such as cool, funny, and useful would be considered as predictor variables. Let's consider those user votes hold same weighted, we'd calculate their average as a factor then multiple by 1/2 as additional half a star.

After that, we also review counts as another factor, then we use these factors to predict star ratings for a business.

The overall star rating is calculated by combination of star rating and review count with additional star from user's experience divided by number of reviews.
                           
                  
iii. Output of your finished dataset:

+------------------------+---------------------------------+-------+--------------+------------------+----------------+
| id                     | name                            | stars | review_count | user_experiences | overall_rating |
+------------------------+---------------------------------+-------+--------------+------------------+----------------+
| -649HdHuChGUfmUc-JcGpA | Shafa Medical Clinic            |   1.5 |            4 |                1 |           1.63 |
| -hCG6fsmBbUxLkvBkCyuiw | Le Confessionnal                |   2.5 |           13 |                0 |            2.5 |
| -ktWLNKZfbB8d3NnenZBnA | Charley's Grilled Subs          |   3.0 |            3 |                0 |            3.0 |
| -CIKKPeyjqN5SD7lVfIUZQ | Tobler Physical Therapy         |   3.5 |            6 |                0 |            3.5 |
| -fiUXzkxRfbHY9TKWwuptw | DESTIHL Restaurant & Brew Works |   4.0 |          449 |                0 |            4.0 |
| -lmarmK7dC5Ukxg1rzvJDg | Kneading Feet Reflexology       |   4.5 |           61 |                2 |           4.52 |
| -9ly39RQ8CvqxPuNZrGEbA | Babcock Plumbing llc            |   5.0 |            7 |                1 |           5.07 |
| -HVNYnMpPBIz_ZYiYj72Jg | Hassell Air Conditioning        |   5.0 |            3 |                1 |           5.17 |
+------------------------+---------------------------------+-------+--------------+------------------+----------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT b.id , b.name, b.stars, b.review_count,
     (u.useful+u.funny+u.cool)/3 AS user_experiences,
     ROUND((b.stars*b.review_count + ((u.useful+u.funny+u.cool)/3)*0.5)/b.review_count,2) AS overall_rating
FROM business b INNER JOIN user u ON b.id = u.id
GROUP BY overall_rating

